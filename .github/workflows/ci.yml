name: CI pipeline

on:
  push:
    branches: [ "master" ]


jobs:
  # run_tests:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: python:alpine
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Install requirments
  #     run: pip install -r requirements.txt
  #   - name: Run tests
  #     run: python3 -m unittest test_*.py

  # build_docker:
  #   # needs: run_tests
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Create tag for docker
  #     run: echo "GIT_SHA_DOCKER=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_ENV
  #   - name: Create docker image
  #     run: docker build -t lorissxd/webapp_cicd:$GIT_SHA_DOCKER .
  #   - name: Login to Dockerhub
  #     env:
  #       DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
  #       DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
  #     run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
  #   - name: Push image to Dockerhub
  #     run: docker push lorissxd/webapp_cicd:$GIT_SHA_DOCKER

  build_server:
  #  needs: build_docker
    runs-on: ubuntu-latest
    outputs:
      sync_tag: ${{ steps.c.outputs.GIT_SHA_SERVER }}
    steps:
    - uses: actions/checkout@v4
    - name: Taking tag from previous job
      id: c
      run: echo "GIT_SHA_SERVER=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_OUTPUT

  deploy:
    needs: build_server
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Taking the tag from previous job
      run: echo $sync_tag
    - name: executing remote ssh commands using password
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT}}
        #envs: sync_tag
        env:
          TAKE_TAG: ${{ needs.build_server.outputs.sync_tag }}
        script: |
          sed "s~\(image: lorissxd/webapp_cicd.*\)~image: lorissxd/webapp_cicd:$sync_tag~g" -i ~/webapp_cicd/docker-compose.yaml

name: Server pipeline

on:
  push:
    branches: [ "master" ]

jobs:
  create_server:
    name: Configure AWS credentials
    runs-on: ubuntu-latest
    outputs:
      ip_addr: ${{ steps.a.outputs.SERVER_IP }}
    steps:
    - uses: actions/checkout@v4
    - uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
    - name: Creating server / Finding public ip address.
      id: a
      run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-01e444924a2233b07 \
            --instance-type t2.micro \
            --key-name "Nikita_Relevant" \
            --security-group-ids sg-0adba3fd89dc7ef06 \
            --user-data file://user_data.txt \
            --query 'Instances[0].InstanceId' \
            --region eu-central-1 \
            --output text)
          if [ -z "$INSTANCE_ID" ]; then
              echo "Ошибка при создании инстанса."
              exit 1
          else
              echo "Инстанс создан с ID: $INSTANCE_ID"
          fi

          # Ожидаем, пока инстанс станет доступен
          echo "Ожидание запуска инстанса..."
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID

          # Step 2. Получаем публичный IP адрес инстанса
          PUBLIC_IP=$(aws ec2 describe-instances \
              --instance-ids $INSTANCE_ID \
              --query 'Reservations[0].Instances[0].PublicIpAddress' \
              --output text)

          # Проверяем, получен ли IP адрес
          if [ -z "$PUBLIC_IP" ]; then
              echo "Не удалось получить публичный IP адрес инстанса."
              exit 1
          else
              echo "Инстанс запущен и доступен по IP: $PUBLIC_IP"
          fi
          echo "SERVER_IP=$PUBLIC_IP">> $GITHUB_OUTPUT


  configure_server:
    name: Configuring server connection
    needs: create_server
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      PUBLIC_IP: ${{ needs.create_server.outputs.ip_addr }}
    steps:
    - uses: actions/checkout@v4
    - name: Taking ip from previous job.
      run: |
        sudo apt install nmap > /dev/null 2> /dev/null
        COUNT=0
        function wait() {
            set +e
            nmap -Pn -p 22 $PUBLIC_IP | grep "22/tcp open" 2>&1 >/dev/null
            exit_code=$?
            set -e
            if [ $exit_code -eq 0 ]; then
                let COUNT=$COUNT+1
                echo $COUNT
                if [ $COUNT -gt 2 ]; then
                    exit
                fi
                sleep 1
            else
              echo 'Sleep'
              sleep 1
            fi
        }

        while true; do
            wait
        done
    - name: Executing remote ssh commands using AWS credentials.
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ env.PUBLIC_IP }}
        username: ${{ secrets.SSH_USERNAME }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT }}
        envs: ${{ secrets.GIT_TOKEN }}
        script: |
          date          

